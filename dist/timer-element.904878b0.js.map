{"mappings":"6YAEAA,EAAA,S,sDAOA,MAAMC,EAAWC,EAAAC,IAAI,2DAGfC,EAAc,GAIL,SAAAC,GAAoBC,WACjCA,KACGC,IAEH,OAAO,EAnBTC,EAAAC,KAckB,UAKC,IAAKL,KAAiBG,EAAOD,WAAYA,EAAYI,QAAQ,cAE5E,EArBJF,EAAAC,KAqBKE,EAAAC,gBAAe,CAACT,KAAMF,EAAUS,QAAQ,qBAK7CL,EAAWQ,gBAAiB,K,kCC3B5B,IAAAC,EAAAd,EAAA,S,0BAKA,MACMe,EAASC,IACTC,EAAOF,KAyBb,SAASG,EAAaC,GAClB,MAAMC,EAAUC,KAAKC,MACfC,EAAc,IAAIF,KAAKF,GAG7B,OAFeI,EAAYC,UAAaD,EAAYE,oBAAsBV,EACpDK,EAI1B,SAASM,EAAQC,GACb,MAAMC,EAAQC,KAAKC,MAAMH,EAAOV,GAAMc,WAChCC,EAAUH,KAAKC,MAAMH,EAAQV,EAAQF,GAAQgB,WAC7CE,EAAUJ,KAAKC,MAAMH,EAAQZ,EAtCxB,KAsC0CgB,WACrD,MAAO,GAAGH,KAASI,EAAQE,SAAS,EAAG,QAAQD,EAAQC,SAAS,EAAG,OAIvEC,eAAeC,OAAO,iBAAiB,EAAAtB,EAAAuB,YApCM,EAAClB,WAACA,MAE3C,MAAMmB,GAAc,EAAAxB,EAAAyB,UAAQ,IAAMpB,GAAcO,EAAQR,EAAaC,KAAc,KAC5EQ,EAAMa,IAAW,EAAAC,EAAAC,UAASJ,GAAe,aACzCK,EAAcC,IAAmB,EAAAH,EAAAC,UAAS,IAE1Cd,EAAOI,EAASC,GAAWN,EAAKkB,MAAM,KAW7C,OATA,EAAAJ,EAAAK,YAAU,KACNC,OAAOC,cAAcL,GACrBM,aAAY,KACJ9B,GACAqB,EAAQd,EAAQR,EAAaC,OAElC,OACJ,CAACA,IAEGjB,EAAAC,IAAI,SAASyB,kBAAsBI,kBAAwBC,aAmBP,CAACiB,cAAc,EAAOC,mBAAoB,CAAC","sources":["src/ui/components/timer-element/timer-element.mdx","src/ui/components/timer-element/timer-element.tsx"],"sourcesContent":["import {ReactHtmlRender} from \"../../react-html-render\";\nimport {html} from \"lit\";\nimport \"./timer-element.tsx\";\nconst template = html`<timer-element target-date=\"2030-01-01\"></timer-element>`\n\n<ReactHtmlRender html={template}/>","import {CustomElement} from \"../../ui-types\";\nimport {component, useMemo} from \"haunted\";\nimport {html} from \"lit\";\nimport {useEffect, useState} from \"haunted/lib/core\";\n\nconst second = 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\n\ntype TimerElementType = CustomElement<{ targetDate: string }>;\n\nexport const TimerElement:TimerElementType = ({targetDate}) => {\n\n    const initialDiff = useMemo(() => targetDate && fmtTime(calcTimeDiff(targetDate)), [])\n    const [time, setTime] = useState(initialDiff || \"00:00:00\");\n    const [lastInterval, setLastInterval] = useState(0);\n\n    const [hours, minutes, seconds] = time.split(\":\");\n\n    useEffect(() => {\n        window.clearInterval(lastInterval);\n        setInterval(() => {\n            if (targetDate) {\n                setTime(fmtTime(calcTimeDiff(targetDate)));\n            }\n        }, 1000);\n    }, [targetDate])\n\n    return html`<span>${hours}</span>:<span>${minutes}</span>:<span>${seconds}</span>`\n}\n\nfunction calcTimeDiff(targetDate: string) {\n    const timeNow = Date.now();\n    const targetDatee = new Date(targetDate);\n    const target = targetDatee.getTime() + (targetDatee.getTimezoneOffset() * minute);\n    const diff = target - timeNow;\n    return diff\n}\n\nfunction fmtTime(time: number) {\n    const hours = Math.floor(time / hour).toString();\n    const minutes = Math.floor((time % hour) / minute).toString();\n    const seconds = Math.floor((time % minute) / second).toString();\n    return `${hours}:${minutes.padStart(2, \"0\")}:${seconds.padStart(2, \"0\")}`\n}\n\ndebugger;\ncustomElements.define(\"timer-element\", component(TimerElement, {useShadowDOM: false, observedAttributes: [\"target-date\"] as any}));"],"names":["parcelRequire","$7aa545b989d4e8c3$var$template","$jkSQt","html","$7aa545b989d4e8c3$var$layoutProps","$7aa545b989d4e8c3$export$2e2bcd8739ae039","components","props","$di58i","mdx","mdxType","$dlCTC","ReactHtmlRender","isMDXComponent","$9so9i","$43fcccd4077a86d6$var$minute","$43fcccd4077a86d6$var$second","$43fcccd4077a86d6$var$hour","$43fcccd4077a86d6$var$calcTimeDiff","targetDate","timeNow","Date","now","targetDatee","getTime","getTimezoneOffset","$43fcccd4077a86d6$var$fmtTime","time","hours","Math","floor","toString","minutes","seconds","padStart","customElements","define","component","initialDiff","useMemo","setTime","$2NXZw","useState","lastInterval","setLastInterval","split","useEffect","window","clearInterval","setInterval","useShadowDOM","observedAttributes"],"version":3,"file":"timer-element.904878b0.js.map"}