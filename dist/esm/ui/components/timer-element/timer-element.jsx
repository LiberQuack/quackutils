import { component, useMemo } from "haunted";
import { html } from "lit";
import { useEffect, useState } from "haunted/lib/core";
const second = 1000;
const minute = second * 60;
const hour = minute * 60;
const day = hour * 24;
export const TimerElement = ({ targetDate }) => {
    const initialDiff = useMemo(() => targetDate && fmtTime(calcTimeDiff(targetDate)), []);
    const [time, setTime] = useState(initialDiff || "00:00:00");
    const [lastInterval, setLastInterval] = useState(0);
    const [hours, minutes, seconds] = time.split(":");
    useEffect(() => {
        window.clearInterval(lastInterval);
        setInterval(() => {
            if (targetDate) {
                setTime(fmtTime(calcTimeDiff(targetDate)));
            }
        }, 1000);
    }, [targetDate]);
    return html `<span>${hours}</span>:<span>${minutes}</span>:<span>${seconds}</span>`;
};
function calcTimeDiff(targetDate) {
    const timeNow = Date.now();
    const targetDatee = new Date(targetDate);
    const target = targetDatee.getTime() + (targetDatee.getTimezoneOffset() * minute);
    const diff = target - timeNow;
    return diff;
}
function fmtTime(time) {
    const hours = Math.floor(time / hour).toString();
    const minutes = Math.floor((time % hour) / minute).toString();
    const seconds = Math.floor((time % minute) / second).toString();
    return `${hours}:${minutes.padStart(2, "0")}:${seconds.padStart(2, "0")}`;
}
customElements.define("timer-element", component(TimerElement, { useShadowDOM: false, observedAttributes: ["target-date"] }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXItZWxlbWVudC5qc3giLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdWkvY29tcG9uZW50cy90aW1lci1lbGVtZW50L3RpbWVyLWVsZW1lbnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzNDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxLQUFLLENBQUM7QUFDekIsT0FBTyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUMzQixNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFJdEIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFvQixDQUFDLEVBQUMsVUFBVSxFQUFDLEVBQUUsRUFBRTtJQUUxRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN0RixNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLElBQUksVUFBVSxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVsRCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ2IsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlDO1FBQ0wsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUVoQixPQUFPLElBQUksQ0FBQSxTQUFTLEtBQUssaUJBQWlCLE9BQU8saUJBQWlCLE9BQU8sU0FBUyxDQUFBO0FBQ3RGLENBQUMsQ0FBQTtBQUVELFNBQVMsWUFBWSxDQUFDLFVBQWtCO0lBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUNsRixNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO0lBQzlCLE9BQU8sSUFBSSxDQUFBO0FBQ2YsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLElBQVk7SUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hFLE9BQU8sR0FBRyxLQUFLLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQTtBQUM3RSxDQUFDO0FBRUQsY0FBYyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxhQUFhLENBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyJ9